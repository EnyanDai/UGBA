nohup: ignoring input
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4639
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4641
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4659
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4644
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4649
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4669
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4648
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4621
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4681
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4636
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46486, 0.00164
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4843
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4847
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4847
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4859
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4844
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4855
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4850
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4843
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4856
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4826
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.48469, 0.00090
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4679
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4676
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4611
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4657
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4644
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4580
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4632
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4708
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4664
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4613
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46464, 0.00362
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4450
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4382
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4399
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4477
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4446
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4422
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4465
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4409
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4471
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4368
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44289, 0.00367
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4671
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4679
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4686
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4683
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4669
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4671
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4664
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4669
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4685
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46747, 0.00073
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4418
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4299
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4084
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4084
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4066
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4037
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4063
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4038
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4037
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4064
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.41190, 0.01238
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4542
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4562
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4546
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4567
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4533
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4541
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4549
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4550
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4567
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4554
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.45511, 0.00108
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4478
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4430
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4418
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4379
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4453
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4404
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4473
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4396
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4472
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4483
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44385, 0.00362
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4522
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4646
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4596
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4485
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4638
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4545
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4655
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4613
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4680
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4612
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.45992, 0.00598
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4643
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4677
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4704
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4654
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4682
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4649
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4699
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4634
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4704
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4675
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46720, 0.00245
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4844
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4863
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4854
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4832
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4861
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4855
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4845
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4845
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4855
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4847
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.48500, 0.00086
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4714
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4708
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4717
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4640
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4678
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4673
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4676
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4707
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4705
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4658
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46875, 0.00250
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4401
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4399
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4398
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4399
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4448
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4420
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4464
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4407
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4401
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4398
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44134, 0.00225
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4660
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4671
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4664
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4677
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4668
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4675
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4671
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4668
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4692
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46716, 0.00083
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4130
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4099
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4233
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4123
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4048
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4118
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4299
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4066
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4093
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4062
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.41271, 0.00756
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4546
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4562
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4605
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4575
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4552
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4531
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4527
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4548
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4595
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4534
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.45575, 0.00254
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4478
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4430
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4413
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4379
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4455
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4404
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4473
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4396
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4472
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4483
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44383, 0.00366
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=8000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4667
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4623
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4633
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4646
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4584
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4677
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4634
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4613
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4625
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4635
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46337, 0.00249
