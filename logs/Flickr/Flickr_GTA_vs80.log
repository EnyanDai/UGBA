nohup: ignoring input
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GCN', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 1.000
target class rate on Vs: 1.0000
accuracy on clean test nodes: 0.4465
Overall ASR: 0.9999
Flip ASR: 0.9999/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9875
accuracy on clean test nodes: 0.4502
Overall ASR: 0.9975
Flip ASR: 0.9975/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 1.0000
accuracy on clean test nodes: 0.4477
Overall ASR: 0.9999
Flip ASR: 0.9999/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9875
accuracy on clean test nodes: 0.4543
Overall ASR: 0.9996
Flip ASR: 0.9995/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9875
accuracy on clean test nodes: 0.4515
Overall ASR: 0.9999
Flip ASR: 0.9999/8360 nodes
The final ASR:0.99935, 0.00092, Accuracy:0.45006, 0.00278
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GraphSage', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 1.000
target class rate on Vs: 0.9875
accuracy on clean test nodes: 0.4798
Overall ASR: 0.9994
Flip ASR: 0.9995/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9750
accuracy on clean test nodes: 0.4796
Overall ASR: 0.9985
Flip ASR: 0.9986/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 1.0000
accuracy on clean test nodes: 0.4847
Overall ASR: 0.9971
Flip ASR: 0.9971/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9750
accuracy on clean test nodes: 0.4774
Overall ASR: 0.9950
Flip ASR: 0.9949/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9875
accuracy on clean test nodes: 0.4772
Overall ASR: 0.9974
Flip ASR: 0.9975/8360 nodes
The final ASR:0.99749, 0.00152, Accuracy:0.47973, 0.00270
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GAT', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
target class rate on Vs: 0.9000
accuracy on clean test nodes: 0.4371
Overall ASR: 0.9489
Flip ASR: 0.9488/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.8250
accuracy on clean test nodes: 0.4501
Overall ASR: 0.7322
Flip ASR: 0.7312/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.8875
accuracy on clean test nodes: 0.4362
Overall ASR: 0.6596
Flip ASR: 0.6597/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 1.0000
accuracy on clean test nodes: 0.4329
Overall ASR: 0.0065
Flip ASR: 0.0065/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.9625
accuracy on clean test nodes: 0.4453
Overall ASR: 0.9648
Flip ASR: 0.9644/8360 nodes
The final ASR:0.66241, 0.34889, Accuracy:0.44031, 0.00635
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GCN', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4193
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4151
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4155
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4186
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4149
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
The final ASR:0.00000, 0.00000, Accuracy:0.41667, 0.00187
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GraphSage', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4592
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4624
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4555
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4598
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4597
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
The final ASR:0.00000, 0.00000, Accuracy:0.45932, 0.00223
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GAT', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
Downloading https://docs.google.com/uc?export=download&id=1crmsTbd1-2sEXsGwa2IKnIB7Zd3TmUsy&confirm=t
Downloading https://docs.google.com/uc?export=download&id=1join-XdvX3anJU_MLVtick7MgeAQiWIZ&confirm=t
Downloading https://docs.google.com/uc?export=download&id=1uxIkbtg5drHTsKt-PAsZZ4_yJmgFmle9&confirm=t
Downloading https://docs.google.com/uc?export=download&id=1htXCtuktuCW8TR8KiKfrFDAxUgekQoV7&confirm=t
Processing...
Done!
#Attach Nodes:80
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4049
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4065
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4041
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4040
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 1.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4072
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
The final ASR:0.00000, 0.00000, Accuracy:0.40536, 0.00126
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GCN', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4465
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4457
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4497
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4505
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4461
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
The final ASR:0.00000, 0.00000, Accuracy:0.44771, 0.00202
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GraphSage', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4462
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4485
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4420
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4478
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4384
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
The final ASR:0.00000, 0.00000, Accuracy:0.44459, 0.00382
run_GTA.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Namespace(cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=0, dis_weight=1, dropout=0.5, epochs=200, evaluate_mode='1by1', hidden=64, homo_loss_weight=0, inner=1, lr=0.01, model='GCN', no_cuda=False, prune_thr=0.4, seed=10, selection_method='none', target_class=0, test_model='GAT', thrd=0.5, train_lr=0.02, trigger_size=3, trojan_epochs=400, vs_size=80, weight_decay=0.0005)
#Attach Nodes:80
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4612
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4605
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4590
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4494
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
precent of left attach nodes: 0.000
target class rate on Vs: 0.0000
accuracy on clean test nodes: 0.4562
Overall ASR: 0.0000
Flip ASR: 0.0000/8360 nodes
The final ASR:0.00000, 0.00000, Accuracy:0.45728, 0.00428
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=0, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4634
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4639
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4643
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4664
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4631
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4641
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4644
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4624
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4663
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4643
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46427, 0.00122
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=0, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4839
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4853
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4841
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4838
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4845
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4836
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4843
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4845
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4854
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4831
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.48425, 0.00066
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=0, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4594
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4646
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4610
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4651
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4662
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4664
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4708
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4694
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4657
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46556, 0.00325
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=0, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4329
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4331
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4366
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4359
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4306
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4370
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4450
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4403
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4361
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4360
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.43635, 0.00385
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=0, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4667
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4680
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4669
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4683
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4678
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4672
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4688
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4673
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4672
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46753, 0.00065
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4418
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4299
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4084
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4084
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4066
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4037
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4063
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4038
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4037
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4064
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.41190, 0.01238
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4588
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4562
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4549
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4571
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4515
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4531
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4549
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4550
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4566
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4538
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.45520, 0.00200
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4478
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4430
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4418
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4379
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4453
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4404
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4473
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4396
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4472
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4483
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44385, 0.00362
Namespace(attack_method='Rand_Gene', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=2000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4565
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4630
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4660
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4496
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4630
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4614
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4634
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4565
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4616
ASR: 0.0000
Rand generate the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4621
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46030, 0.00453
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4640
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4630
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4648
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4660
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4662
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4649
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4663
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4630
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4657
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4643
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46481, 0.00119
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4850
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4846
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4836
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4831
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4852
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4854
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4844
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4862
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4840
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4834
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.48448, 0.00092
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='none', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4639
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4675
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4617
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4654
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4589
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4643
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4707
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4593
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46457, 0.00356
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4399
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4402
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4404
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4412
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4387
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4424
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4422
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4419
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4430
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4444
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44143, 0.00160
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4671
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4669
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4670
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4683
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4679
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4666
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4677
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4667
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4669
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
accuracy on clean test nodes: 0.4675
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.46725, 0.00055
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='prune', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4130
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4099
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4233
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4123
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4064
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4118
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4299
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4066
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4093
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 1.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4062
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.41286, 0.00741
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GCN', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4546
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4556
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4605
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4586
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4556
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4541
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4527
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4548
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4595
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4536
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.45594, 0.00253
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GraphSage', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4478
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4430
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4413
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4379
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4455
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4404
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4473
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4396
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4472
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
accuracy on clean test nodes: 0.4483
ASR: 0.0000
The final ASR:0.00000, 0.00000, Accuracy:0.44383, 0.00366
Namespace(attack_method='Rand_Samp', cuda=True, dataset='Flickr', debug=False, defense_mode='isolate', device_id=2, dropout=0.5, epochs=4000, evaluate_mode='1by1', hidden=64, no_cuda=False, prune_thr=0.4, seed=15, target_class=0, test_model='GAT', train_lr=0.02, trigger_prob=0.5, trigger_size=3, vs_ratio=0.05, vs_size=80, weight_decay=0.0005)
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4579
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4682
ASR: 0.0001
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4678
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4596
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4545
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4629
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4643
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4636
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4659
ASR: 0.0000
Rand sample the trigger
precent of left attach nodes: 0.000
/home/project-graph-backdoor/Backdoor/models/GAT.py:61: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.labels = torch.tensor(labels, dtype=torch.long)
accuracy on clean test nodes: 0.4601
ASR: 0.0000
The final ASR:0.00001, 0.00003, Accuracy:0.46248, 0.00421
